// <auto-generated />
using System;
using DumpDrive.Data.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DumpDrive.Data.Migrations
{
    [DbContext(typeof(DumpDriveDbContext))]
    [Migration("20241230210723_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DumpDrive.Data.Entities.Models.Drive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Owner_Id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Drives");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OwnerId = 1
                        },
                        new
                        {
                            Id = 2,
                            OwnerId = 2
                        });
                });

            modelBuilder.Entity("DumpDrive.Data.Entities.Models.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FolderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.ToTable("Files");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2024, 12, 30, 21, 7, 23, 119, DateTimeKind.Utc).AddTicks(9750),
                            FolderId = 1,
                            LastChanged = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "First Draft"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2024, 12, 30, 21, 7, 23, 119, DateTimeKind.Utc).AddTicks(9753),
                            FolderId = 1,
                            LastChanged = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Second Draft"
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2024, 12, 30, 21, 7, 23, 119, DateTimeKind.Utc).AddTicks(9754),
                            FolderId = 3,
                            LastChanged = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Favorite foods"
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2024, 12, 30, 21, 7, 23, 119, DateTimeKind.Utc).AddTicks(9756),
                            FolderId = 4,
                            LastChanged = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Quarter report"
                        });
                });

            modelBuilder.Entity("DumpDrive.Data.Entities.Models.FileComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FileId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("UserId");

                    b.ToTable("FilesComment");
                });

            modelBuilder.Entity("DumpDrive.Data.Entities.Models.FileLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("FileLines");
                });

            modelBuilder.Entity("DumpDrive.Data.Entities.Models.Folder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ParentDriveId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentDriveId");

                    b.ToTable("Folders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Homework",
                            ParentDriveId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Essay",
                            ParentDriveId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Random",
                            ParentDriveId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Work",
                            ParentDriveId = 2
                        });
                });

            modelBuilder.Entity("DumpDrive.Data.Entities.Models.SharedFileUser", b =>
                {
                    b.Property<int>("FileId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("FileId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("SharedFilesUsers");
                });

            modelBuilder.Entity("DumpDrive.Data.Entities.Models.SharedFolderUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("FolderId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "FolderId");

                    b.HasIndex("FolderId");

                    b.ToTable("SharedFoldersUsers");
                });

            modelBuilder.Entity("DumpDrive.Data.Entities.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "manje@mail.com",
                            Password = "123loz_abc"
                        },
                        new
                        {
                            Id = 2,
                            Email = "duje@mail.com",
                            Password = "456pass_xyz"
                        });
                });

            modelBuilder.Entity("DumpDrive.Data.Entities.Models.File", b =>
                {
                    b.HasOne("DumpDrive.Data.Entities.Models.Folder", "Folder")
                        .WithMany("Files")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("DumpDrive.Data.Entities.Models.FileComment", b =>
                {
                    b.HasOne("DumpDrive.Data.Entities.Models.File", "ParentFile")
                        .WithMany("Comments")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DumpDrive.Data.Entities.Models.User", null)
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentFile");
                });

            modelBuilder.Entity("DumpDrive.Data.Entities.Models.FileLine", b =>
                {
                    b.HasOne("DumpDrive.Data.Entities.Models.File", "ParentFile")
                        .WithMany("FileLines")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentFile");
                });

            modelBuilder.Entity("DumpDrive.Data.Entities.Models.Folder", b =>
                {
                    b.HasOne("DumpDrive.Data.Entities.Models.Drive", "ParentDrive")
                        .WithMany("Folders")
                        .HasForeignKey("ParentDriveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentDrive");
                });

            modelBuilder.Entity("DumpDrive.Data.Entities.Models.SharedFileUser", b =>
                {
                    b.HasOne("DumpDrive.Data.Entities.Models.File", "File")
                        .WithMany("SharedWith")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DumpDrive.Data.Entities.Models.User", "User")
                        .WithMany("SharedFiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DumpDrive.Data.Entities.Models.SharedFolderUser", b =>
                {
                    b.HasOne("DumpDrive.Data.Entities.Models.Folder", "Folder")
                        .WithMany("SharedWith")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DumpDrive.Data.Entities.Models.User", "User")
                        .WithMany("SharedFolders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Folder");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DumpDrive.Data.Entities.Models.Drive", b =>
                {
                    b.Navigation("Folders");
                });

            modelBuilder.Entity("DumpDrive.Data.Entities.Models.File", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FileLines");

                    b.Navigation("SharedWith");
                });

            modelBuilder.Entity("DumpDrive.Data.Entities.Models.Folder", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("SharedWith");
                });

            modelBuilder.Entity("DumpDrive.Data.Entities.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("SharedFiles");

                    b.Navigation("SharedFolders");
                });
#pragma warning restore 612, 618
        }
    }
}
